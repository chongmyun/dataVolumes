//도커 볼륨 (컨테이너가 삭제되어도 저장된 파일을 유지하는 방법 -> 익명볼륨은 편집은 못함)
** 볼륨은 도커가 관리한다. 
docker run -d -p 3000:80 --rm --name feedback-app -v feedback:/app/feedback feedback-node:volumes (볼륨 옵션 추가)
//도커 볼륨 삭제
docker volume rm VOLUME_NAME , docker volume prune

//바인드 마운트 (호스트 머신 경로를 지정해 바인드할 수 있다. 호스트가 관리한다)
-v "호스트경로:컨테이너경로"
Linux : -v $(pwd):/app
(docker run -d --rm -p 3000:80 --name feedback-app -v feedback:/app/feedback -v "D:\dockerComp\dataVolumes:/app:ro" -v /app/node_modules -v /app/temp  feedback-node:volumes)
**볼륨 명령어는 기본값이 read-write -> ro를 추가할경우 readOnly
/** 익명볼륨에 호스트 절대경로와 컨테이너 경로를 지정해준다
호스트 파일을 바인딩할땐 컨테이너 해당경로의 파일이 모두 덮어써지기 때문에
익명 볼륨을 통해 원하는 폴더 혹은 파일을 예외처리 할 수 있다.
왜냐하면 도커는 간단한 규칙상 더 길고 더 구체적인 경로를 채택한다.
**/

//도커파일 관리
docker volume --help

//Dockerfile COPY vs 바인드 마운트
개발중에는 바인드 마운트를 사용해 수정된 내용을 적용할 수 있지만 운영환경에서는 변경이 안돼야하기때문에 COPY사용

//도커 환경변수 설정
docker run -e PORT=8000 --env PORT=8000 (-e = --env)
docker run --env-file ./.env -> 파일지정

//빌드 타임 인수
Dockerfile에 ARG 추가 후 
docker build 시 --build-arg 추가
docker build -t feedback-node:dev --build-arg DEFAULT_PORT=8000 .